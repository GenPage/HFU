switch_to_maximilian = {
	if = {
		limit = {
			has_country_flag = tla_choose_max
		}
		760 = {
			add_core_of = MAX
			MAX = { transfer_state = PREV }
		}
		MAX = { change_tag_from = TLA }
	}
}

release_maximilian = {
	every_state = {
		limit = { is_maximilian_state = yes }
		MAX = { add_state_core = PREV }

		if = {
			limit = { is_owned_by = TLA }
			MAX = { transfer_state = PREV }
		}
	}
	MAX = {
		spawn_max_armies = yes
		add_ideas = tla_efficiency_code
	}
	TLA = {
		#release = MAX
		set_variable = { tla_intellectuals_popularity = party_popularity@intellectuals }
		set_variable = { maximilian_released = 1 }
		set_political_party = {
			ideology = intellectuals
			popularity = 0
		}

		if = {
			limit = {
				NOT = {
					has_completed_focus = tla_last_will_and_testament
				}
				NOT = {
					has_game_rule = {
						rule =  TLA_status
						option = CHILDREN
					}
				}
			}
			MAX = {
				add_timed_idea = {
					idea = tla_untimely_death
					days = 500
				}
			}
		}

		if = {
			limit = {
				all_tlaloc_children_released = yes
			}
			set_global_flag = tlaloc_died
			if = {
				limit = {
					NOT = {
						has_game_rule = {
							rule =  TLA_status
							option = CHILDREN
						}
					}
				}
				kill_tlaloc = yes
			}
		}
	}
}

switch_to_moctezuma = {
	if = {
		limit = {
			has_country_flag = tla_choose_moc
		}
		765 = {
			add_core_of = MAX
			MOC = { transfer_state = PREV }
		}
		MOC = { change_tag_from = TLA }
	}
}

release_moctezuma = {
	every_state = {
		limit = { is_moctezuma_state = yes }
		MOC = { add_state_core = PREV }

		if = {
			limit = { is_owned_by = TLA }
			MOC = { transfer_state = PREV }
		}
	}
	775 = {
		if = {
			limit = {
				is_owned_by = TLA
			}
			add_core_of = MOC
			MOC = { transfer_state = PREV }
		}
	}
	MOC = {
		spawn_moc_armies = yes
		add_ideas = tla_efficiency_code
	}
	TLA = {
		#release = MOC
		set_variable = { tla_elites_popularity = party_popularity@elites }
		set_variable = { moctezuma_released = 1 }
		set_political_party = {
			ideology = elites
			popularity = 0
		}

		if = {
			limit = {
				NOT = {
					has_completed_focus = tla_last_will_and_testament
				}
				NOT = {
					has_game_rule = {
						rule =  TLA_status
						option = CHILDREN
					}
				}
			}
			MOC = {
				add_timed_idea = {
					idea = tla_untimely_death
					days = 500
				}
			}
		}

		if = {
			limit = {
				all_tlaloc_children_released = yes
			}
			set_global_flag = tlaloc_died
			if = {
				limit = {
					NOT = {
						has_game_rule = {
							rule =  TLA_status
							option = CHILDREN
						}
					}
				}
				kill_tlaloc = yes
			}
		}
	}
}

switch_to_zapata = {
	if = {
		limit = {
			has_country_flag = tla_choose_zap
		}
		763 = {
			add_core_of = ZAP
			ZAP = { transfer_state = PREV }
		}
		ZAP = { change_tag_from = TLA }
	}
}

release_zapata = {
	every_state = {
		limit = { is_zapata_state = yes }
		ZAP = { add_state_core = PREV }

		if = {
			limit = { is_owned_by = TLA }
			ZAP = { transfer_state = PREV }
		}
	}
	ZAP = {
		spawn_zap_armies = yes
		add_ideas = tla_efficiency_code
	}
	TLA = {
		#release = ZAP
		set_variable = { tla_people_popularity = party_popularity@people }
		set_variable = { zapata_released = 1 }
		set_political_party = {
			ideology = people
			popularity = 0
		}

		if = {
			limit = {
				NOT = {
					has_completed_focus = tla_last_will_and_testament
				}
				NOT = {
					has_game_rule = {
						rule =  TLA_status
						option = CHILDREN
					}
				}
			}
			ZAP = {
				add_timed_idea = {
					idea = tla_untimely_death
					days = 500
				}
			}
		}

		if = {
			limit = {
				all_tlaloc_children_released = yes
			}
			set_global_flag = tlaloc_died
			if = {
				limit = {
					NOT = {
						has_game_rule = {
							rule =  TLA_status
							option = CHILDREN
						}
					}
				}
				kill_tlaloc = yes
			}
		}
	}
}

kill_tlaloc = {

	769 = { remove_core_of = TLA }
	if = {
		limit = {
			check_variable = { global.max_ratio > global.moc_ratio }
			check_variable = { global.max_ratio > global.zap_ratio }
		}
		MAX = { transfer_state = 769 }
	}
	else_if = {
		limit = {
			check_variable = { global.moc_ratio > global.max_ratio }
			check_variable = { global.moc_ratio > global.zap_ratio }
		}
		MOC = { transfer_state = 769 }
	}
	else_if = {
		limit = {
			check_variable = { global.zap_ratio > global.max_ratio }
			check_variable = { global.zap_ratio > global.moc_ratio }
		}
		ZAP = { transfer_state = 769 }
	}
	else = {
		log = "WARNING: BOGUS RATIOS - CANNOT DETERMINE TLALOC'S LAIR OWNER!"
		log = "WARNING: TRANSFERRING TLALOC'S LAIR TO MAXIMILIAN..."
		MAX = { transfer_state = 769 }
	}

	if = {
		limit = {
			ARM = {
				NOT = {
					has_country_flag = tla_owns_silo
				}
			}
		}
		launch_nuke = {
			province = 9394
			state = 761
			controller = TLA
			use_nuke = no
		}
		launch_nuke = {
			province = 740
			state = 761
			controller = TLA
			use_nuke = no
		}
		launch_nuke = {
			province = 11075
			state = 761
			controller = TLA
			use_nuke = no
		}

		every_country = {
			limit = {
				OR = {
					is_mexican = yes
					tag = CES
				}
			}
			goto_state = 761
			news_event = nf_tlaloc.105
		}
		else_if = {
			limit = {
				ARM = {
					has_country_flag = tla_owns_silo
				}
			}
			every_country = {
				limit = {
					OR = {
						is_mexican = yes
						tag = CES
					}
				}
				news_event = nf_tlaloc.106
			}
		}
	}

	clear_variable = global.tlaloc_robot_divisions
	clear_variable = global.tlaloc_robot_battalions
	clear_variable = global.tlaloc_human_divisions
	clear_variable = global.tlaloc_human_battalions
	clear_variable = global.max_ratio
	clear_variable = global.moc_ratio
	clear_variable = global.zap_ratio
	clear_variable = global.max_robot_divisions
	clear_variable = global.max_human_divisions
	clear_variable = global.max_robot_battalions
	clear_variable = global.max_human_battalions
	clear_variable = global.moc_robot_divisions
	clear_variable = global.moc_human_divisions
	clear_variable = global.moc_robot_battalions
	clear_variable = global.moc_human_battalions
	clear_variable = global.zap_robot_divisions
	clear_variable = global.zap_human_divisions
	clear_variable = global.zap_robot_battalions
	clear_variable = global.zap_human_battalions
	every_state = {
		limit = {
			is_core_of = TLA
		}
		undecimate_half_all_industry = yes
	}
	every_state = {
		limit = {
			is_tlaloc_original_state = yes
		}
		remove_core_of = TLA
	}
}

honor_tlaloc_guarantee = {
	custom_effect_tooltip = honor_tlaloc_guarantee_tt
	hidden_effect = {
		for_each_scope_loop = {
			array = FROM.enemies
			if = {
				limit = {
					has_offensive_war_with = FROM
				}
				TLA = {
					add_to_war = {
						targeted_alliance = FROM
						enemy = PREV
						hostility_reason = tlaloc_angry
					}
				}
			}
		}
	}
}

make_tlaloc_angry_with_me = {
	TLA = {
		add_ai_strategy = {
			type = antagonize
			id = PREV
			value = 800
		}
		add_ai_strategy = {
			type = contain
			id = PREV
			value = 800
		}
		add_ai_strategy = {
			type = ignore
			id = PREV
			value = -800
		}
		add_ai_strategy = {
			type = conquer
			id = PREV
			value = 800
		}
		add_ai_strategy = {
			type = invade
			id = PREV
			value = 800
		}
	}
}

tlaloc_death_news_events = {
	every_country = {
		limit = {
			is_neighbor_of = MAX
			NOT = { TAG =  TLA }
		}
		news_event = nf_tlaloc.201
	}
	every_country = {
		limit = {
			is_neighbor_of = MOC
			NOT = { TAG =  TLA }
		}
		news_event = nf_tlaloc.202
	}
	every_country = {
		limit = {
			is_neighbor_of = ZAP
			NOT = { TAG =  TLA }
		}
		news_event = nf_tlaloc.203
	}
}

tlaloc_child_army_variables = {
	#Set variable for how many Robots Tlaloc has in army
	set_variable = { global.tlaloc_robot_divisions = num_armies_with_type@combat_robot }
	add_to_variable = { global.tlaloc_robot_divisions = num_armies_with_type@support_robot }

	#Set variable for how many robot battalions Tlaloc has in total
	set_variable = { global.tlaloc_robot_battalions = num_battalions_with_type@combat_robot }
	add_to_variable = { global.tlaloc_robot_battalions = num_battalions_with_type@support_robot }

	#Set variable for how many Huamns Tlaloc has in army
	set_variable = { global.tlaloc_human_divisions = num_armies_with_type@infantry }
	add_to_variable = { global.tlaloc_human_divisions = num_armies_with_type@militia }
	add_to_variable = { global.tlaloc_human_divisions = num_armies_with_type@motorized }
	add_to_variable = { global.tlaloc_human_divisions = num_armies_with_type@fireteam_infantry }
	add_to_variable = { global.tlaloc_human_divisions = num_armies_with_type@demolitions_infantry }
	add_to_variable = { global.tlaloc_human_divisions = num_armies_with_type@power_armour }
	add_to_variable = { global.tlaloc_human_divisions = num_armies_with_type@power_armour_fireteam_infantry }
	add_to_variable = { global.tlaloc_human_divisions = num_armies_with_type@power_armour_demolitions_infantry }
	add_to_variable = { global.tlaloc_human_divisions = num_armies_with_type@spec_ops }

	#Set variable for how many human battalions Tlaloc has in total
	set_variable = { global.tlaloc_human_battalions = num_battalions_with_type@infantry }
	add_to_variable = { global.tlaloc_human_battalions = num_battalions_with_type@militia }
	add_to_variable = { global.tlaloc_human_battalions = num_battalions_with_type@motorized }
	add_to_variable = { global.tlaloc_human_battalions = num_battalions_with_type@fireteam_infantry }
	add_to_variable = { global.tlaloc_human_battalions = num_battalions_with_type@demolitions_infantry }
	add_to_variable = { global.tlaloc_human_battalions = num_battalions_with_type@power_armour }
	add_to_variable = { global.tlaloc_human_battalions = num_battalions_with_type@power_armour_fireteam_infantry }
	add_to_variable = { global.tlaloc_human_battalions = num_battalions_with_type@power_armour_demolitions_infantry }
	add_to_variable = { global.tlaloc_human_battalions = num_battalions_with_type@spec_ops }

	#Set variables for each childs ratio of power
	set_variable = { global.max_ratio = party_popularity@intellectuals }
	set_variable = { global.moc_ratio = party_popularity@elites }
	set_variable = { global.zap_ratio = party_popularity@people }

	#Set variables for amount of troops max should get
	set_temp_variable = { mr1 = global.max_ratio }
	multiply_temp_variable = { mr1 = global.tlaloc_robot_divisions }
	set_variable = { global.max_robot_divisions = mr1 }

	set_temp_variable = { mh1 = global.max_ratio }
	multiply_temp_variable = { mh1 = global.tlaloc_human_divisions }
	set_variable = { global.max_human_divisions = mh1 }

	set_temp_variable = { mr2 = global.max_ratio }
	multiply_temp_variable = { mr2 = global.tlaloc_robot_battalions }
	set_variable = { global.max_robot_battalions = mr2 }

	set_temp_variable = { mh2 = global.max_ratio }
	multiply_temp_variable = { mh2 = global.tlaloc_human_battalions }
	set_variable = { global.max_human_battalions = mh2 }

	#Set variables for amount of troops moc should get
	set_temp_variable = { or1 = global.moc_ratio }
	multiply_temp_variable = { or1 = global.tlaloc_robot_divisions }
	set_variable = { global.moc_robot_divisions = or1 }

	set_temp_variable = { oh1 = global.moc_ratio }
	multiply_temp_variable = { oh1 = global.tlaloc_human_divisions }
	set_variable = { global.moc_human_divisions = oh1 }

	set_temp_variable = { or2 = global.moc_ratio }
	multiply_temp_variable = { or2 = global.tlaloc_robot_battalions }
	set_variable = { global.moc_robot_battalions = or2 }

	set_temp_variable = { oh2 = global.moc_ratio }
	multiply_temp_variable = { oh2 = global.tlaloc_human_battalions }
	set_variable = { global.moc_human_battalions = oh2 }

	#Set variables for amount of troops zap should get_battalions
	set_temp_variable = { zr1 = global.zap_ratio }
	multiply_temp_variable = { zr1 = global.tlaloc_robot_divisions }
	set_variable = { global.zap_robot_divisions = zr1 }

	set_temp_variable = { zh1 = global.zap_ratio }
	multiply_temp_variable = { zh1 = global.tlaloc_human_divisions }
	set_variable = { global.zap_human_divisions = zh1 }

	set_temp_variable = { zr2 = global.zap_ratio }
	multiply_temp_variable = { zr2 = global.tlaloc_robot_battalions }
	set_variable = { global.zap_robot_battalions = zr2 }

	set_temp_variable = { zh2 = global.zap_ratio }
	multiply_temp_variable = { zh2 = global.tlaloc_human_battalions }
	set_variable = { global.zap_human_battalions = zh2 }

	round_variable = global.max_robot_divisions
	round_variable = global.moc_robot_divisions
	round_variable = global.zap_robot_divisions
	round_variable = global.max_robot_battalions
	round_variable = global.moc_robot_battalions
	round_variable = global.zap_robot_battalions
	round_variable = global.max_human_divisions
	round_variable = global.max_human_battalions
	round_variable = global.moc_human_divisions
	round_variable = global.moc_human_battalions
	round_variable = global.zap_human_divisions
	round_variable = global.zap_human_battalions

	#Set Equipment Variables
	set_temp_variable = { tlaloc_combat_robots_equipment = num_equipment@combat_robot_equipment }
	set_temp_variable = { tlaloc_support_robots_equipment = num_equipment@support_robot_equipment }
	set_temp_variable = { tlaloc_infantry_equipment = num_equipment@infantry_equipment }

	set_variable = { global.max_infantry_equipment = tlaloc_infantry_equipment }
	multiply_variable = { global.max_infantry_equipment = global.max_ratio }
	set_variable = { global.max_combat_robot_equipment = tlaloc_combat_robots_equipment }
	multiply_variable = { global.max_combat_robot_equipment = global.max_ratio }
	set_variable = { global.max_support_robot_equipment = tlaloc_support_robots_equipment }
	multiply_variable = { global.max_support_robot_equipment = global.max_ratio }

	set_variable = { global.moc_infantry_equipment = tlaloc_infantry_equipment }
	multiply_variable = { global.moc_infantry_equipment = global.moc_ratio }
	set_variable = { global.moc_combat_robot_equipment = tlaloc_combat_robots_equipment }
	multiply_variable = { global.moc_combat_robot_equipment = global.moc_ratio }
	set_variable = { global.moc_support_robot_equipment = tlaloc_support_robots_equipment }
	multiply_variable = { global.moc_support_robot_equipment = global.moc_ratio }

	set_variable = { global.zap_infantry_equipment = tlaloc_infantry_equipment }
	multiply_variable = { global.zap_infantry_equipment = global.zap_ratio }
	set_variable = { global.zap_combat_robot_equipment = tlaloc_combat_robots_equipment }
	multiply_variable = { global.zap_combat_robot_equipment = global.zap_ratio }
	set_variable = { global.zap_support_robot_equipment = tlaloc_support_robots_equipment }
	multiply_variable = { global.zap_support_robot_equipment = global.zap_ratio }


	round_variable = global.max_infantry_equipment
	round_variable = global.max_combat_robot_equipment
	round_variable = global.max_support_robot_equipment
	round_variable = global.moc_infantry_equipment
	round_variable = global.moc_combat_robot_equipment
	round_variable = global.moc_support_robot_equipment
	round_variable = global.zap_infantry_equipment
	round_variable = global.zap_combat_robot_equipment
	round_variable = global.zap_support_robot_equipment

	# log = "Tlaloc Robot Divisions: [?global.tlaloc_robot_divisions]. Tlaloc Human Divisions: [?global.tlaloc_human_divisions]"
	# log = "Tlaloc Robot Battalions: [?global.tlaloc_robot_battalions] Tlaloc Human Battalions: [?global.tlaloc_human_battalions]"
	# log = "Max's ratio: [?global.max_ratio]. Moc's Ratio: [?global.moc_ratio]. Zap's Ratio: [?global.zap_ratio]."
	# log = "Max Robot Divisions: [?global.max_robot_divisions]. Max Human Division: [?global.max_human_divisions]."
	# log = "Max Robot Battalions: [?global.max_robot_battalions]. Max Human Battalions: [?global.max_human_battalions]."
	# log = "Moc Robot Divisions: [?global.moc_robot_divisions]. Moc Human Division: [?global.moc_human_divisions]."
	# log = "Moc Robot Battalions: [?global.moc_robot_battalions]. Moc Human Battalions: [?global.moc_human_battalions]."
	# log = "Zap Robot Divisions: [?global.zap_robot_divisions]. Zap Human Division: [?global.zap_human_divisions]."
	# log = "Zap Robot Battalions: [?global.zap_robot_battalions]. Zap Human Battalions: [?global.zap_human_battalions]."
	# log = "Tlaloc Infantry Equipment: [?tlaloc_infantry_equipment]"
	# log = "Tlaloc Combat Robot Equipment: [?tlaloc_combat_robots_equipment]"
	# log = "Tlaloc Support Robot Equipment: [?tlaloc_support_robots_equipment]"
	# log = "Max Infantry Equipment: [?global.max_infantry_equipment]"
	# log = "Max Combat Robot Equipment: [?global.max_combat_robot_equipment]"
	# log = "Max Support Robot Equipment: [?global.max_support_robot_equipment]"
	# log = "Moc Infantry Equipment: [?global.moc_infantry_equipment]"
	# log = "Moc Combat Robot Equipment: [?global.moc_combat_robot_equipment]"
	# log = "Moc Support Robot Equipment: [?global.moc_support_robot_equipment]"
	# log = "Zap Infantry Equipment: [?global.zap_infantry_equipment]"
	# log = "Zap Combat Robot Equipment: [?global.zap_combat_robot_equipment]"
	# log = "Zap Support Robot Equipment: [?global.zap_support_robot_equipment]"
}

spawn_max_armies = {
	#log = "Spawning Max's Armies"
	if = {
		limit = {
			has_template = "Guardia"
		}
		delete_unit_template_and_units = { division_template = "Guardia" }
	}
	if = {
		limit = {
			has_template = "Fuerza Milicia"
		}
		delete_unit_template_and_units = { division_template = "Fuerza Milicia" }
	}
	load_oob = maximilian_spawn
	if = {
		limit = {
			has_template = "Robots Policiales"
		}
		delete_unit_template_and_units = { division_template = "Robots Policiales" }
	}

	for_loop_effect = {
		start = 0
		end = global.max_robot_divisions

		random_owned_controlled_state = {
			limit = {
				NOT = {
					has_state_category = wasteland
				}
			}
			create_unit = {
				division = "division_template = \"Imperial Guards\" start_experience_factor = 0.6 start_equipment_factor = 1.0"
				owner = PREV
			}
		}

		set_temp_variable = { max_spawned_robot_battalions = num_battalions_with_type@combat_robot }
		add_to_temp_variable = { max_spawned_robot_battalions = num_battalions_with_type@support_robot }

		if = {
			limit = {
				check_variable = {
					var = max_spawned_robot_battalions
					value = global.max_robot_battalions
					compare = greater_than_or_equals
				}
			}
			clear_variable = global.max_robot_divisions
			clear_variable = global.max_robot_battalions
			set_temp_variable = { break = 1 }
		}
	}

	for_loop_effect = {
		start = 0
		end = global.max_human_divisions

		random_owned_controlled_state = {
			limit = {
				NOT = {
					has_state_category = wasteland
				}
			}
			create_unit = {
				division = "division_template = \"Guardia\" start_experience_factor = 0.6 start_equipment_factor = 1.0"
				owner = PREV
			}
		}

		set_temp_variable = { max_spawned_human_battalions = num_battalions_with_type@infantry }
		add_to_temp_variable = { max_spawned_human_battalions = num_battalions_with_type@militia }
		add_to_temp_variable = { max_spawned_human_battalions = num_battalions_with_type@motorized }
		add_to_temp_variable = { max_spawned_human_battalions = num_battalions_with_type@fireteam_infantry }
		add_to_temp_variable = { max_spawned_human_battalions = num_battalions_with_type@demolitions_infantry }
		add_to_temp_variable = { max_spawned_human_battalions = num_battalions_with_type@power_armour }
		add_to_temp_variable = { max_spawned_human_battalions = num_battalions_with_type@power_armour_fireteam_infantry }
		add_to_temp_variable = { max_spawned_human_battalions = num_battalions_with_type@power_armour_demolitions_infantry }
		add_to_temp_variable = { max_spawned_human_battalions = num_battalions_with_type@spec_ops }

		if = {
			limit = {
				check_variable = {
					var = max_spawned_human_battalions
					value = global.max_human_battalions
					compare = greater_than_or_equals
				}
			}
			clear_variable = global.max_human_divisions
			clear_variable = global.max_human_battalions
			set_temp_variable = { break = 1 }
		}
	}

	if = {
		limit = { check_variable = { global.max_infantry_equipment > 0 } }
		add_equipment_to_stockpile = {
			type = infantry_equipment
			amount = global.max_infantry_equipment
		}
	}
	if = {
		limit = { check_variable = { global.max_combat_robot_equipment > 0 } }
		add_equipment_to_stockpile = {
			type = combat_robot_equipment
			amount = global.max_combat_robot_equipment
		}
	}
	if = {
		limit = { check_variable = { global.max_support_robot_equipment > 0 } }
		add_equipment_to_stockpile = {
			type = support_robot_equipment
			amount = global.max_support_robot_equipment
		}
	}

	clear_variable = global.max_combat_robot_equipment
	clear_variable = global.max_support_robot_equipment
	clear_variable = global.max_infantry_equipment

	if = {
		limit = {
			has_global_flag = tlaloc_died
		}
		clear_variable = global.tlaloc_robot_divisions
		clear_variable = global.tlaloc_robot_battalions
		clear_variable = global.tlaloc_human_divisions
		clear_variable = global.tlaloc_human_battalions
		clear_variable = global.max_ratio
		clear_variable = global.moc_ratio
		clear_variable = global.zap_ratio
	}
}

spawn_moc_armies = {
	#log = "Spawning Moc's Armies"
	if = {
		limit = {
			has_template = "Guardia"
		}
		delete_unit_template_and_units = { division_template = "Guardia" }
	}
	if = {
		limit = {
			has_template = "Fuerza Milicia"
		}
		delete_unit_template_and_units = { division_template = "Fuerza Milicia" }
	}
	load_oob = moctezuma_spawn
	if = {
		limit = {
			has_template = "Robots Policiales"
		}
		delete_unit_template_and_units = { division_template = "Robots Policiales" }
	}

	for_loop_effect = {
		start = 0
		end = global.moc_robot_divisions

		random_owned_controlled_state = {
			limit = {
				NOT = {
					has_state_category = wasteland
				}
			}
			create_unit = {
				division = "division_template = \"Jaguar Warriors\" start_experience_factor = 0.6 start_equipment_factor = 1.0"
				owner = PREV
			}
		}

		set_temp_variable = { moc_spawned_robot_battalions = num_battalions_with_type@combat_robot }
		add_to_temp_variable = { moc_spawned_robot_battalions = num_battalions_with_type@support_robot }

		if = {
			limit = {
				check_variable = {
					var = moc_spawned_robot_battalions
					value = global.moc_robot_battalions
					compare = greater_than_or_equals
				}
			}
			clear_variable = global.moc_robot_divisions
			clear_variable = global.moc_robot_battalions
			set_temp_variable = { break = 1 }
		}
	}

	for_loop_effect = {
		start = 0
		end = global.moc_human_divisions

		random_owned_controlled_state = {
			limit = {
				NOT = {
					has_state_category = wasteland
				}
			}
			create_unit = {
				division = "division_template = \"Guardia\" start_experience_factor = 0.6 start_equipment_factor = 1.0"
				owner = PREV
			}
		}

		set_temp_variable = { moc_spawned_human_battalions = num_battalions_with_type@infantry }
		add_to_temp_variable = { moc_spawned_human_battalions = num_battalions_with_type@militia }
		add_to_temp_variable = { moc_spawned_human_battalions = num_battalions_with_type@motorized }
		add_to_temp_variable = { moc_spawned_human_battalions = num_battalions_with_type@fireteam_infantry }
		add_to_temp_variable = { moc_spawned_human_battalions = num_battalions_with_type@demolitions_infantry }
		add_to_temp_variable = { moc_spawned_human_battalions = num_battalions_with_type@power_armour }
		add_to_temp_variable = { moc_spawned_human_battalions = num_battalions_with_type@power_armour_fireteam_infantry }
		add_to_temp_variable = { moc_spawned_human_battalions = num_battalions_with_type@power_armour_demolitions_infantry }
		add_to_temp_variable = { moc_spawned_human_battalions = num_battalions_with_type@spec_ops }

		if = {
			limit = {
				check_variable = {
					var = moc_spawned_human_battalions
					value = global.moc_human_battalions
					compare = greater_than_or_equals
				}
			}
			clear_variable = global.moc_human_divisions
			clear_variable = global.moc_human_battalions
			set_temp_variable = { break = 1 }
		}
	}

	if = {
		limit = { check_variable = { global.moc_infantry_equipment > 0 } }
		add_equipment_to_stockpile = {
			type = infantry_equipment
			amount = global.moc_infantry_equipment
		}
	}
	if = {
		limit = { check_variable = { global.moc_combat_robot_equipment > 0 } }
		add_equipment_to_stockpile = {
			type = combat_robot_equipment
			amount = global.moc_combat_robot_equipment
		}
	}
	if = {
		limit = { check_variable = { global.moc_support_robot_equipment > 0 } }
		add_equipment_to_stockpile = {
			type = support_robot_equipment
			amount = global.moc_support_robot_equipment
		}
	}

	clear_variable = global.moc_combat_robot_equipment
	clear_variable = global.moc_support_robot_equipment
	clear_variable = global.moc_infantry_equipment

	if = {
		limit = {
			has_global_flag = tlaloc_died
		}
		clear_variable = global.tlaloc_robot_divisions
		clear_variable = global.tlaloc_robot_battalions
		clear_variable = global.tlaloc_human_divisions
		clear_variable = global.tlaloc_human_battalions
		clear_variable = global.max_ratio
		clear_variable = global.moc_ratio
		clear_variable = global.zap_ratio
	}
}

spawn_zap_armies = {
	#log = "Spawning Zap's Armies in spawn_zap_armies [Root.GetName]"
	if = {
		limit = {
			has_template = "Guardia"
		}
		delete_unit_template_and_units = { division_template = "Guardia" }
	}
	if = {
		limit = {
			has_template = "Fuerza Milicia"
		}
		delete_unit_template_and_units = { division_template = "Fuerza Milicia" }
	}
	load_oob = zapata_spawn
	if = {
		limit = {
			has_template = "Robots Policiales"
		}
		delete_unit_template_and_units = { division_template = "Robots Policiales" }
	}

	#log = "Finished adding templates"

	for_loop_effect = {
		start = 0
		end = global.zap_robot_divisions

		#log = "Inside Zap Robot For Loop Iteration: [?v]"

		random_owned_controlled_state = {
			limit = {
				NOT = {
					has_state_category = wasteland
				}
			}
			#log = "Created Robot Zap Unit"
			create_unit = {
				division = "division_template = \"Revolutionaries\" start_experience_factor = 0.6 start_equipment_factor = 1.0"
				owner = PREV
			}
		}

		set_temp_variable = { zap_spawned_robot_battalions = num_battalions_with_type@combat_robot }
		add_to_temp_variable = { zap_spawned_robot_battalions = num_battalions_with_type@support_robot }

		if = {
			limit = {
				check_variable = {
					var = zap_spawned_robot_battalions
					value = global.zap_robot_battalions
					compare = greater_than_or_equals
				}
			}
			#log = "Break out of Robot Zap Spawn"
			clear_variable = global.zap_robot_divisions
			clear_variable = global.zap_robot_battalions
			set_temp_variable = { break = 1 }
		}
	}

	for_loop_effect = {
		start = 0
		end = global.zap_human_divisions

		#log = "Inside Zap Robot For Loop Iteration: [?v]"

		random_owned_controlled_state = {
			limit = {
				NOT = {
					has_state_category = wasteland
				}
			}
			#log = "Created Human Zap Unit"
			create_unit = {
				division = "division_template = \"Guardia\" start_experience_factor = 0.6 start_equipment_factor = 1.0"
				owner = PREV
			}
		}

		set_temp_variable = { zap_spawned_human_battalions = num_battalions_with_type@infantry }
		add_to_temp_variable = { zap_spawned_human_battalions = num_battalions_with_type@militia }
		add_to_temp_variable = { zap_spawned_human_battalions = num_battalions_with_type@motorized }
		add_to_temp_variable = { zap_spawned_human_battalions = num_battalions_with_type@fireteam_infantry }
		add_to_temp_variable = { zap_spawned_human_battalions = num_battalions_with_type@demolitions_infantry }
		add_to_temp_variable = { zap_spawned_human_battalions = num_battalions_with_type@power_armour }
		add_to_temp_variable = { zap_spawned_human_battalions = num_battalions_with_type@power_armour_fireteam_infantry }
		add_to_temp_variable = { zap_spawned_human_battalions = num_battalions_with_type@power_armour_demolitions_infantry }
		add_to_temp_variable = { zap_spawned_human_battalions = num_battalions_with_type@spec_ops }

		if = {
			limit = {
				check_variable = {
					var = zap_spawned_human_battalions
					value = global.zap_human_battalions
					compare = greater_than_or_equals
				}
			}
			#log = "Break out of Human Zap Spawn"
			clear_variable = global.zap_human_divisions
			clear_variable = global.zap_human_battalions
			set_temp_variable = { break = 1 }
		}
	}

	if = {
		limit = { check_variable = { global.zap_infantry_equipment > 0 } }
		add_equipment_to_stockpile = {
			type = infantry_equipment
			amount = global.zap_infantry_equipment
		}
	}
	if = {
		limit = { check_variable = { global.zap_combat_robot_equipment > 0 } }
		add_equipment_to_stockpile = {
			type = combat_robot_equipment
			amount = global.zap_combat_robot_equipment
		}
	}
	if = {
		limit = { check_variable = { global.zap_support_robot_equipment > 0 } }
		add_equipment_to_stockpile = {
			type = support_robot_equipment
			amount = global.zap_support_robot_equipment
		}
	}

	clear_variable = global.zap_combat_robot_equipment
	clear_variable = global.zap_support_robot_equipment
	clear_variable = global.zap_infantry_equipment

	if = {
		limit = {
			has_global_flag = tlaloc_died
		}
		clear_variable = global.tlaloc_robot_divisions
		clear_variable = global.tlaloc_robot_battalions
		clear_variable = global.tlaloc_human_divisions
		clear_variable = global.tlaloc_human_battalions
		clear_variable = global.max_ratio
		clear_variable = global.moc_ratio
		clear_variable = global.zap_ratio
	}
}
# vim: set ft=pdx ts=2 sw=2 tw=79 :
