on_actions = {
	#ROOT is new controller #FROM is old controller #FROM.FROM is state ID
	on_daily={
	effect={
	for_each_scope_loop={
	array=GLOBAL.fuel_countries
	#set_temp_variable={currentfuel=fuel_k}
	#set_temp_variable={currentfuelmax=max_fuel_k}
	#divide_temp_variable={currentfuel=currentfuelmax}
	set_variable={countryfuel=fuel_ratio}
	set_temp_variable={currentfuel=countryfuel}
	subtract_from_temp_variable={currentfuel=1}
	multiply_temp_variable={currentfuel = 88}
	set_variable={fuel_bar_fuel=currentfuel}
	}
	
	
	every_country={
	limit={
	#tag=GER
	has_country_flag=fuel_system_enabled
	}
	
	for_each_scope_loop={
	array = THIS.faction_members_array
	if={
	limit={check_variable={send_fuel_enabled >1}}
	set_variable={fuelbedarf=min_fuel}
	subtract_from_variable={fuelbedarf=countryfuel}
	set_variable={fuelbedarfanteil=fuelbedarf}
	multiply_variable={fuelbedarf=max_fuel_k}
	set_variable={fuelbedarfvorzeichen=fuelbedarf}
	multiply_variable={fuelbedarfvorzeichen=-1}
	multiply_variable={fuelbedarfvorzeichen=1000}
	multiply_variable={fuelbedarf=1000}
	#log=" [THIS.GetName] [?fuel_k]wow"
	#log=" [THIS.GetName]  [?fuelnegativ]wow"
	PREV={
	#log="[THIS.GetName]"
		set_variable={fuelbedarf=min_fuel}
		subtract_from_variable={fuelbedarf=fuel_ratio}
		set_variable={fuelbedarfanteil=fuelbedarf}
		multiply_variable={fuelbedarf=max_fuel_k}
		set_variable={fuelbedarfvorzeichen=fuelbedarf}
		multiply_variable={fuelbedarfvorzeichen=-1}
		multiply_variable={fuelbedarfvorzeichen=1000}
		multiply_variable={fuelbedarf=1000}
		set_variable={free_stockpile=max_fuel_k}
		subtract_from_variable={free_stockpile=fuel_k}
		multiply_variable={free_stockpile=1000}
	}
	set_variable={countryfuelplus5=countryfuel}
	add_to_variable={countryfuelplus5=0.05}
	if={limit={ #fuel von prev zu this
	check_variable={PREV.fuelbedarf <0} #hat prev mehr fuel als minimum?
	check_variable={min_fuel > countryfuelplus5} # braucht this Ã¼berhaupt fuel?
	}
	log="1"
		if={
		limit={
		check_variable={fuelbedarf >0}
		check_variable={PREV.fuelbedarfvorzeichen >fuelbedarf}
		}
		GER={add_fuel=PREV.fuelbedarfvorzeichen}
		add_fuel=fuelbedarf
		}
		else={
		GER={add_fuel=fuelbedarf}
		add_fuel=PREV.fuelbedarfvorzeichen
		}
	}
	else_if={ #fuel von this zu prev
		limit={
		check_variable={fuelbedarf <0} #hat this mehr fuel als minimum?
		#check_variable={min_fuel <countryfuelplus5} # hat THIS fuel?
		}
		log="2[THIS.GetName]"
		if={
			limit={
			check_variable={fuelbedarfvorzeichen <PREV.free_stockpile} # ist this free fuel kleiner als prev free stockpile?
			}
			GER={add_fuel=PREV.fuelbedarfvorzeichen}
			add_fuel=fuelbedarf
		}
		else={
			
			GER={add_fuel=free_stockpile}
			add_fuel=PREV.free_stockpile
		}
	}
	
	}
	}}
	}
	
	}
	
	on_state_control_changed = {
		effect = {
			if = {
				limit = {
					ROOT = {
						OR = {
							tag = JAP
							tag = MAN
							tag = SIA
						}
					}
					FROM.FROM = {
						AND = {
							NOT = { has_state_flag = rubber_state_transfered } 
							OR = {
								state = 623
								state = 327
								state = 625
								state = 627
								state = 333
								state = 334
								state = 672
								state = 733
								state = 422
								state = 335
								state = 667
								state = 721
								state = 673
								state = 668
								state = 669
								state = 523
								state = 737
								state = 634
								state = 635
								state = 626
								state = 628
								state = 336
								state = 624
								state=738
							}
							USA = {
								divisions_in_state = {
									type = infantry
									size < 1
									state = FROM.FROM
								}
							}
							NZL = {
								divisions_in_state = {
									type = infantry
									size < 1
									state = FROM.FROM
								}
							}
							AST = {
								divisions_in_state = {
									type = infantry
									size < 1
									state = FROM.FROM
								}
							}
							RAJ = {
								divisions_in_state = {
									type = infantry
									size < 1
									state = FROM.FROM
								}
							}
							SAF = {
								divisions_in_state = {
									type = infantry
									size < 1
									state = FROM.FROM
								}
							}
							CAN = {
								divisions_in_state = {
									type = infantry
									size < 1
									state = FROM.FROM
								}
							}
							ENG = {
								divisions_in_state = {
									type = infantry
									size < 1
									state = FROM.FROM
								}
							}
							FRA = {
								divisions_in_state = {
									type = infantry
									size < 1
									state = FROM.FROM
								}
							}
							IRE = {
								divisions_in_state = {
									type = infantry
									size < 1
									state = FROM.FROM
								}
							}
						}
					}
				}
				FROM.FROM = {
					set_state_flag = rubber_state_transfered
				}
				JAP = { set_state_controller = FROM.FROM }
			}
		}
	}
	on_capitulation = {
			effect = {
				if = {
					limit = {
						OR={
						tag=BEL
						tag=HOL
						tag=DEN
						tag=POL
						tag=NOR
						tag=LUX
					}}
					country_event={id=surrender.1 days=2}
					if={limit={tag=POL}GER={country_event={id=germany.14 days=3}}}
				}
						
				}
			}

	on_declare_war={
		effect={
			if = {
						limit = {
							ROOT = {
								TAG = GER
							}
							NOT = {
								has_global_flag = GER_has_started_war
							}
						}
						FRA={activate_mission=FRA_Resistance}
						set_global_flag = GER_has_started_war
					}



			if = {
						limit = {
							FROM = {
								OR={
									tag=BEL
									tag=DEN
									tag=POL
									tag=NOR
									tag=LUX
									tag=GRE
									tag=YUG
							
								}
							}
						}
						ENG={add_to_faction=FROM}
					}
			else_if = {
						limit = {
							FROM = {
								tag=HOL				
								
							}
						}
						ENG={add_to_faction=FROM}
						GER={
							declare_war_on = {
								target = INS
								type = annex_everything
							}
						}
				}

		}
	}
		on_startup = {
		effect = {
			SIA = {
				give_resource_rights = { receiver = GER state = 724 }
			}
		}
	}
}